<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Josselin Auguste, software gardener</title>
    <link>https://www.iblop.net/</link>
    <description>Recent content on Josselin Auguste, software gardener</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; now and then | &lt;a href=&#34;http://gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; ♥</copyright>
    <lastBuildDate>Tue, 10 Apr 2018 22:39:53 +0200</lastBuildDate>
    
	<atom:link href="https://www.iblop.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Interesting Stuff #5</title>
      <link>https://www.iblop.net/posts/interesting-stuff-5/</link>
      <pubDate>Tue, 10 Apr 2018 22:39:53 +0200</pubDate>
      
      <guid>https://www.iblop.net/posts/interesting-stuff-5/</guid>
      <description>Piotr Moczurad - Visual-textual functional programming with Luna at LambdaDays 2018 Is Luna is ultimate come back of the visual development paradigm, proposed this time in a functional flavour? In a few words, it is a technology allowing to visually program functional pipelines for data manipulation.
I haven&amp;rsquo;t tried it myself, but I can easily imagine use cases as a visual DSL intended to be used by non-programmers domain exports, to allow them manipulate data on their own.</description>
    </item>
    
    <item>
      <title>Interesting Stuff #4</title>
      <link>https://www.iblop.net/posts/interesting-stuff-4/</link>
      <pubDate>Thu, 22 Feb 2018 14:16:43 +0100</pubDate>
      
      <guid>https://www.iblop.net/posts/interesting-stuff-4/</guid>
      <description>Haskell at Work - Haskell Programming Screencasts A new haskell screencast serie, composed of (currently) short weekly episodes &amp;ndash; quite interesting and well produced.
The Death of Microservice Madness in 2018 - dwmkerr Why isn&amp;rsquo;t it a good idea to migrate an architecture to microservices to follow a trend, instead of doing so facing a real technical problem? What are the potential drawbacks?
Another perspective on this question by Simon Brown: The monolith vs microservices debate is multi-faceted … this doesn’t capture everything, but here’s one way to look at it.</description>
    </item>
    
    <item>
      <title>Le petit guide pour découvrir la programmation fonctionnelle</title>
      <link>https://www.iblop.net/posts/le-petit-guide-pour-decouvrir-la-programmation-fonctionnelle/</link>
      <pubDate>Sat, 17 Feb 2018 13:13:22 +0100</pubDate>
      
      <guid>https://www.iblop.net/posts/le-petit-guide-pour-decouvrir-la-programmation-fonctionnelle/</guid>
      <description>Découvrir la programmation fonctionnelle par le Texas Hold’em, c’est la bonne petite idée de Christophe Thibaut pour son livre The Little Haskeller.
Le livre retranscrit une discussion imaginaire entre un novice et un haskeller sur la manière de modéliser une partie de Texas Hold’em. Ce mode narratif rend la lecture extrêmement didactique et la compréhension du sujet très progressive, à l&amp;rsquo;opposé de l&amp;rsquo;image austère que trainent bon nombre de livres sur le sujet1.</description>
    </item>
    
    <item>
      <title>Reason: a great language for the future</title>
      <link>https://www.iblop.net/posts/reason-a-great-language-for-the-future/</link>
      <pubDate>Fri, 09 Feb 2018 22:15:50 +0100</pubDate>
      
      <guid>https://www.iblop.net/posts/reason-a-great-language-for-the-future/</guid>
      <description>Reason (a.k.a ReasonML) is an almost new programming language developed by Facebook, compiling to Javascript. Thanks to the ReasonReact library, its aim is obviously to become the next de facto choice for building React applications (and indeed, it makes great sense).
The language is based on OCaml, and so benefits from all the nice OCaml features: static typing, great module system, immutability by default, nice compact syntax. This ancestry reinforces Reason strengths for React development, which perfectly fits with functional paradigms.</description>
    </item>
    
    <item>
      <title>Interesting Stuff #3</title>
      <link>https://www.iblop.net/posts/interesting-stuff-3/</link>
      <pubDate>Wed, 24 Jan 2018 19:02:59 +0100</pubDate>
      
      <guid>https://www.iblop.net/posts/interesting-stuff-3/</guid>
      <description>Haxl: A Big Hammer for Concurrency by Simon Marlow Haxl is an Haskell library which completely abstracts concurrency, allowing to use it almost transparently when possible, and as easily as by nesting our code in a do block. This gives us concurrency, caching, testability (or at least snapshot testing) and reproductibility for debugging for almost free.
This looks like an interesting paradigm, at least conceptually, because, in the same way memory management was automated 20 years ago to drastically facilitate our daily job, it is still sad that we have to manually manage such a complex topic.</description>
    </item>
    
    <item>
      <title>Interesting Stuff #2</title>
      <link>https://www.iblop.net/posts/interesting-stuff-2/</link>
      <pubDate>Thu, 18 Jan 2018 00:17:10 +0100</pubDate>
      
      <guid>https://www.iblop.net/posts/interesting-stuff-2/</guid>
      <description>Designing with Capabilities - Scott Wlaschin A talk by Scott Wlaschin at DDD Europe, about designing systems by exposing capabilities restricting the consumer (a user or a piece of code) to only be able to consume the features available to him, instead of testing everywhere if the code has the permission to be executed. This looks like REST hypermedia applied to domain modelling, which seems appropriate to increase the affordance of the code we produce and consume.</description>
    </item>
    
    <item>
      <title>Interesting Stuff #1</title>
      <link>https://www.iblop.net/posts/interesting-stuff-1/</link>
      <pubDate>Wed, 10 Jan 2018 21:08:07 +0100</pubDate>
      
      <guid>https://www.iblop.net/posts/interesting-stuff-1/</guid>
      <description>Hewitt, Meijer and Szyperski: The Actor Model (everything you wanted to know&amp;hellip;) A rare thing, a discussion between Carl Hewitt (the man who designed the actor model), Erik Meijer and Clemens Szyperski about the concepts behind the actor model. Way more valuable than the hordes of Akka tutorials.
The wikipedia page about the Actor Model is also very knowledgeable on this subject.
For further reading, the original paper can be found online: A Universal Modular Actor Formalism for Artificial Intelligence.</description>
    </item>
    
  </channel>
</rss>